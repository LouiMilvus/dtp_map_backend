import pandas as pd
import ast
import json
import os

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ vina
def safe_parse_vina(vina):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—è vina"""
    if pd.isna(vina) or vina in ["[]", "", "nan", "null"]:
        return []

    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–µ–∂–µ–π –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    vina_cleaned = vina.replace("(", "[").replace(")", "]").replace("'", '"')

    try:
        return json.loads(vina_cleaned)
    except json.JSONDecodeError:
        try:
            # –ï—Å–ª–∏ JSON –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º ast.literal_eval
            return ast.literal_eval(vina)
        except (ValueError, SyntaxError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {vina} ‚Üí {e}")
            return []

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
def parse_narusheniya(vina, narusheniya_dict):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ vina –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
    vina_list = safe_parse_vina(vina)
    result = []

    for item in vina_list:
        if not isinstance(item, dict):
            continue  # –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        type_uchastnik = item.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        narushenie_ids = item.get('narushenie', [])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
        if isinstance(narushenie_ids, tuple):
            narushenie_ids = list(narushenie_ids)

        narushenie_names = [narusheniya_dict.get(n, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({n})") for n in narushenie_ids]

        result.append({
            'type': type_uchastnik,
            'narusheniya': narushenie_names
        })

    return result

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
def load_dict(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤ —Å–ª–æ–≤–∞—Ä—å {id: –∑–Ω–∞—á–µ–Ω–∏–µ}"""
    df = pd.read_csv(file_path)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    file_name = os.path.basename(file_path).split('.')[0]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, mo, vid_dtp
    value_column = file_name if file_name in df.columns else df.columns[1]  # —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    return dict(zip(df['id'], df[value_column]))

# ‚úÖ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
base_path = '/opt/dtp_map_backend/data/'
dict_path = f"{base_path}dict/"
dtp_file = f"{base_path}dtp/output/output.csv"

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
mo_dict = load_dict(f"{dict_path}mo.csv")
vid_dtp_dict = load_dict(f"{dict_path}vid_dtp.csv")
sost_pogodi_dict = load_dict(f"{dict_path}sost_pogodi.csv")
sost_proez_chasti_dict = load_dict(f"{dict_path}sost_proez_chasti.csv")
osveshenie_dict = load_dict(f"{dict_path}osveshenie.csv")
ndu_dict = load_dict(f"{dict_path}ndu.csv")
narusheniya_dict = load_dict(f"{dict_path}narusheniya.csv")

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–¢–ü
dtp_df = pd.read_csv(dtp_file)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
print("üõ†Ô∏è –°—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
print(dtp_df.columns)

# ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
result = []

for _, row in dtp_df.iterrows():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç NaN
    def safe_value(value, default="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"):
        return default if pd.isna(value) else value

    obj = {
        "id_kard": safe_value(row.get("id_kard")),
        "date": safe_value(row.get("date_dtp")),
        "mo": {
            "id": safe_value(row.get("mo")),
            "name": mo_dict.get(row.get("mo"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        },
        "vid_dtp": {
            "id": safe_value(row.get("vid_dtp")),
            "name": vid_dtp_dict.get(row.get("vid_dtp"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        },
        "ndu": {
            "id": safe_value(row.get("ndu")),
            "name": ndu_dict.get(row.get("ndu"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        },
        "address": safe_value(row.get("address")),
        "pogibshie": safe_value(row.get("pogibshie"), 0),
        "ranenie": safe_value(row.get("ranenie"), 0),
        "sost_pogodi": {
            "id": safe_value(row.get("sost_pogodi")),
            "name": sost_pogodi_dict.get(row.get("sost_pogodi"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        },
        "sost_proez_chasti": {
            "id": safe_value(row.get("sost_proez_chasti")),
            "name": sost_proez_chasti_dict.get(row.get("sost_proez_chasti"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        },
        "osveshenie": {
            "id": safe_value(row.get("osveshenie")),
            "name": osveshenie_dict.get(row.get("osveshenie"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        },
        "narusheniya": parse_narusheniya(row.get("vina"), narusheniya_dict)
    }
    result.append(obj)

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
output_file = f"{base_path}dtp/output/result.json"
with open(output_file, "w", encoding="utf-8") as f:
    json.dump(result, f, ensure_ascii=False, indent=4)

print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
