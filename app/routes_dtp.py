from flask import Blueprint, jsonify, request
import pandas as pd
import ast
import os
import numpy as np
import re

dtp_bp = Blueprint('dtp', __name__)

# –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É
DATA_FILE = '/opt/dtp_map_backend/data/dtp/output/output.csv'

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
def load_and_filter_dtp(year=None, mo=None, vid_dtp=None):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(DATA_FILE)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
        df['year'] = pd.to_datetime(df['date_dtp'], dayfirst=True).dt.year

        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        df = df[['id_kard', 'year', 'mo', 'vid_dtp', 'coord_w', 'coord_l']]

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if year:
            df = df[df['year'] == int(year)]
        if mo:
            df = df[df['mo'] == int(mo)]
        if vid_dtp:
            df = df[df['vid_dtp'] == int(vid_dtp)]

        return df.to_dict(orient='records')

    except Exception as e:
        return {"error": str(e)}

# –ú–∞—Ä—à—Ä—É—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
@dtp_bp.route('/dtp/coord', methods=['GET'])
def get_dtp_coord():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –î–¢–ü —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ year, mo, vid_dtp"""
    year = request.args.get('year')
    mo = request.args.get('mo')
    vid_dtp = request.args.get('vid_dtp')

    data = load_and_filter_dtp(year, mo, vid_dtp)
    return jsonify(data)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ id_kard
def get_card_by_id(id_kard):
    try:
        # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(DATA_FILE)

        # üî• –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ id_kard
        card = df[df['id_kard'] == int(id_kard)].to_dict(orient='records')

        if not card:
            return {"error": "–î–¢–ü —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id_kard –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        card = card[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å

        # ‚úÖ –ü–∞—Ä—Å–∏–º –≤–∏–Ω—É –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        vina_raw = card.get('vina', '[]')

        # üî• –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ vina
        #print(f"DEBUG - raw vina: {repr(vina_raw)}")

        # üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if isinstance(vina_raw, float) and np.isnan(vina_raw):
            vina_raw = '[]'

        # üî• –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if vina_raw.startswith('"') and vina_raw.endswith('"'):
            vina_raw = vina_raw[1:-1]

        # üî• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NaN ‚Üí None –∏ –∫–æ—Ä—Ç–µ–∂–∏ ‚Üí —Å–ø–∏—Å–∫–∏
        vina_fixed = vina_raw.replace('nan', 'None')
        vina_fixed = re.sub(r'\((.*?)\)', r'[\1]', vina_fixed)

        # üî• –ü–∞—Ä—Å–∏–Ω–≥ –≤ –º–∞—Å—Å–∏–≤ Python-–æ–±—ä–µ–∫—Ç–æ–≤
        try:
            vina_list = ast.literal_eval(vina_fixed)
        except (SyntaxError, ValueError):
            vina_list = []

        # ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–Ω—ã
        vina_formatted = []

        for item in vina_list:
            if not isinstance(item, dict) or item.get('type') in [None, 'nan']:
                continue

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
            entity = {
                "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ ‚Ññ": f"{item.get('number_ts', 'N/A')}",
                item.get('type', 'N/A'): {
                    "–°—Ç–µ–ø–µ–Ω—å —Ç—è–∂–µ—Å—Ç–∏": item.get('stepen_tyazhesti', 'N/A'),
                    "–ù–∞—Ä—É—à–µ–Ω–∏–µ": list(item.get('narushenie', []))
                }
            }
            vina_formatted.append(entity)

        # ‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        result = {
            "id_kard": card['id_kard'],
            "–î–∞—Ç–∞": card['date_dtp'],
            "–í–∏–¥ –î–¢–ü": card['vid_dtp'],
            "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": card['mo'],
            "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è": card['sost_pogodi'],
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∑–∂–µ–π —á–∞—Å—Ç–∏": card['sost_proez_chasti'],
            "–û—Å–≤–µ—â–µ–Ω–∏–µ": card['osveshenie'],
            "–í–∏–Ω–∞": vina_formatted
        }

        return result

    except Exception as e:
        return {"error": str(e)}

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ id_kard
@dtp_bp.route('/dtp/card/<int:id_kard>', methods=['GET'])
def get_dtp_card(id_kard):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –î–¢–ü –ø–æ id_kard"""
    data = get_card_by_id(id_kard)
    return jsonify(data)
